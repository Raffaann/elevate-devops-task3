== TERRAFORM INIT ==
Initializing the backend...
Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "~> 3.0.2"...
- Installing kreuzwerker/docker v3.0.2...
- Installed kreuzwerker/docker v3.0.2 (self-signed, key ID BD080C4571C6104C)
Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://developer.hashicorp.com/terraform/cli/plugins/signing
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform used the selected providers to generate the following        
execution plan. Resource actions are indicated with the following      
symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx_container will be created
  + resource "docker_container" "nginx_container" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "task3-container"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + name         = "nginx:latest"
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx_container will be created
  + resource "docker_container" "nginx_container" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "task3-container"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + name         = "nginx:latest"
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.nginx: Creating...
docker_image.nginx: Still creating... [00m10s elapsed]
docker_image.nginx: Creation complete after 10s [id=sha256:029d4461bd98f124e531380505ceea2072418fdf28752aa73b7b273ba3048903nginx:latest]      
docker_container.nginx_container: Creating...
docker_container.nginx_container: Creation complete after 1s [id=94b5d2d30c50302a502ff157ccf8af5c273fd347af651ac253cdb0734159f553]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

docker_image.nginx: Refreshing state... [id=sha256:029d4461bd98f124e531380505ceea2072418fdf28752aa73b7b273ba3048903nginx:latest]
docker_container.nginx_container: Refreshing state... [id=94b5d2d30c50302a502ff157ccf8af5c273fd347af651ac253cdb0734159f553]

Terraform used the selected providers to generate the following        
execution plan. Resource actions are indicated with the following      
symbols:
  - destroy

Terraform will perform the following actions:

  # docker_container.nginx_container will be destroyed
  - resource "docker_container" "nginx_container" {
      - attach                                      = false -> null    
      - command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> null
      - container_read_refresh_timeout_milliseconds = 15000 -> null    
      - cpu_shares                                  = 0 -> null        
      - dns                                         = [] -> null       
      - dns_opts                                    = [] -> null       
      - dns_search                                  = [] -> null       
      - entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> null
      - env                                         = [] -> null       
      - group_add                                   = [] -> null       
      - hostname                                    = "94b5d2d30c50" -> null
      - id                                          = "94b5d2d30c50302a502ff157ccf8af5c273fd347af651ac253cdb0734159f553" -> null
      - image                                       = "sha256:029d4461bd98f124e531380505ceea2072418fdf28752aa73b7b273ba3048903" -> null       
      - init                                        = false -> null    
      - ipc_mode                                    = "private" -> null
      - log_driver                                  = "json-file" -> null
      - log_opts                                    = {} -> null       
      - logs                                        = false -> null    
      - max_retry_count                             = 0 -> null        
      - memory                                      = 0 -> null        
      - memory_swap                                 = 0 -> null        
      - must_run                                    = true -> null     
      - name                                        = "task3-container"
 -> null
      - network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - mac_address               = "02:6c:e7:23:e4:27"        
              - network_name              = "bridge"
                # (2 unchanged attributes hidden)
            },
        ] -> null
      - network_mode                                = "bridge" -> null 
      - privileged                                  = false -> null    
      - publish_all_ports                           = false -> null    
      - read_only                                   = false -> null    
      - remove_volumes                              = true -> null     
      - restart                                     = "no" -> null     
      - rm                                          = false -> null    
      - runtime                                     = "runc" -> null   
      - security_opts                               = [] -> null       
      - shm_size                                    = 64 -> null       
      - start                                       = true -> null     
      - stdin_open                                  = false -> null    
      - stop_signal                                 = "SIGQUIT" -> null
      - stop_timeout                                = 1 -> null        
      - storage_opts                                = {} -> null       
      - sysctls                                     = {} -> null       
      - tmpfs                                       = {} -> null       
      - tty                                         = false -> null    
      - wait                                        = false -> null    
      - wait_timeout                                = 60 -> null       
        # (7 unchanged attributes hidden)

      - ports {
          - external = 8080 -> null
          - internal = 80 -> null
          - ip       = "0.0.0.0" -> null
          - protocol = "tcp" -> null
        }
    }

  # docker_image.nginx will be destroyed
  - resource "docker_image" "nginx" {
      - id           = "sha256:029d4461bd98f124e531380505ceea2072418fdf28752aa73b7b273ba3048903nginx:latest" -> null
      - image_id     = "sha256:029d4461bd98f124e531380505ceea2072418fdf28752aa73b7b273ba3048903" -> null
      - keep_locally = false -> null
      - name         = "nginx:latest" -> null
      - repo_digest  = "nginx@sha256:029d4461bd98f124e531380505ceea2072418fdf28752aa73b7b273ba3048903" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

docker_container.nginx_container: Destroying... [id=94b5d2d30c50302a502ff157ccf8af5c273fd347af651ac253cdb0734159f553]
docker_container.nginx_container: Destruction complete after 0s
docker_image.nginx: Destroying... [id=sha256:029d4461bd98f124e531380505ceea2072418fdf28752aa73b7b273ba3048903nginx:latest]
docker_image.nginx: Destruction complete after 1s

Destroy complete! Resources: 2 destroyed.